<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backbone.js | Silex Blog]]></title>
  <link href="http://silexkr.github.com/blog/categories/backbone-js/atom.xml" rel="self"/>
  <link href="http://silexkr.github.com/"/>
  <updated>2012-02-21T11:55:46+09:00</updated>
  <id>http://silexkr.github.com/</id>
  <author>
    <name><![CDATA[Silex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[backbone.js]]></title>
    <link href="http://silexkr.github.com/blog/2012/02/17/backbone-dot-js/"/>
    <updated>2012-02-17T19:39:00+09:00</updated>
    <id>http://silexkr.github.com/blog/2012/02/17/backbone-dot-js</id>
    <content type="html"><![CDATA[<h2>배경</h2>

<p>아 <a href="http://documentcloud.github.com/backbone/">backbone.js</a> 가 만들어진 배경이 아니라, 제가 사용하게 된
배경입니다. 회사에서 진행하는 <code>javascript</code> 를 나름 무겁게 사용하는
프로젝트가 있습니다. "갑"님의 요구사항이 날이 갈수록 복잡해 짐에 따라
<code>jquery</code> 플러그인도 맨들고, <code>require.js</code> 를 사용해서 파일을 조직화해서
사용하고 있었습니다만 <code>$.ajax</code> 에 대한 callback 이 늘어남에 따라 점점
코드의 복잡도가 증가해서 해결해야 될 문제라고 생각했습니다.</p>

<p><a href="https://trello.com/">Trello</a> 에서
<a href="http://blog.fogcreek.com/the-trello-tech-stack/">The Trello Tech Stack</a>
<a href="http://documentcloud.github.com/backbone/">backbone.js</a>를 쓴다는 글을 보고 사용방법을 좀
알아보았습니다.</p>

<p><img src="http://blog.fogcreek.com/wp-content/uploads/2012/01/trello-freehand.jpg" alt="Trello Early Architecture Drawing" /></p>

<h2>자세한 설명은 (몰라서)생략</h2>

<p>왜 쓰는지 뭔가 좋은지 그런거 모릅니다. 여기서는 어떻게 사용하는지만
다룹니다. 검색 ㄱㄱ</p>

<p><img src="https://lh5.googleusercontent.com/-i82V0GanZr4/T0IfDIDWq6I/AAAAAAAAABY/VnAii_7ds5E/no_more_details.jpg" alt="자세한 설명은 생략한다" /></p>

<h2>맨든사람</h2>

<p><a href="https://twitter.com/#!/jashkenas">Jeremy Ashkenas - Twitter</a>,
<a href="https://github.com/jashkenas/">Jeremy Ashkenas - Github</a></p>

<p>요즘 가장 인기있는 코딩왕이 아닐까 합니다.</p>

<ul>
<li><a href="http://coffeescript.org/">CoffeeScript</a></li>
<li><a href="http://documentcloud.github.com/underscore/">underscore.js</a></li>
<li><a href="http://documentcloud.github.com/backbone/">backbone.js</a></li>
</ul>


<p>위에 세개다 저 사람이 맨들었답니다.</p>

<h2>돈워리</h2>

<p><a href="http://documentcloud.github.com/backbone/#examples">http://documentcloud.github.com/backbone/#examples</a></p>

<ul>
<li>FourSuare</li>
<li>LinkedIn</li>
<li>37 Signals</li>
<li>Trello</li>
<li>Silex(끼워 넣어 봅니다)</li>
<li>...</li>
</ul>


<p>등에서 이미 쓰이고 있다고..</p>

<h2>연습삼아 맨든 프로젝트</h2>

<p>일단 <a href="http://coffeescript.org/">CoffeeScript</a>만세라서
<a href="http://coffeescript.org/">CoffeeScript</a>로 구현하였습니다.</p>

<p><a href="http://aanoaa.github.com/jquery-note/">jquery-note plugin</a>을 다시
한번 만들어 봤습니다.</p>

<h3>Server-side</h3>

<p><img src="https://lh5.googleusercontent.com/-_aPZkJJp5LI/T0I_SRERM-I/AAAAAAAAABo/k_WLzmWNs08/s1024/res-res.example.png" alt="server-side" /></p>

<p>RESTful 하게 구현되어야 합니다. <a href="http://documentcloud.github.com/backbone/">backbone.js</a>의 <code>model</code>과
<code>collection</code>은 url 규약을 가지고 있습니다.</p>

<p>```</p>

<h1>http://documentcloud.github.com/backbone/#Sync</h1>

<p>The default sync handler maps CRUD to REST like so:</p>

<p>create → POST   /collection
read → GET   /collection[/id]
update → PUT   /collection/id
delete → DELETE   /collection/id
```</p>

<p>좀 간단하게 말하면 위에선 언급한 구조의 HTTP method 와 url 규약을
지키고, 요청 헤더의 <code>Accept</code>에 걸맞는 응답을 줘야 합니다.</p>

<p>서버와 sync 를 하기 위해 <code>model.save()</code> 또는 <code>collection.fetch()</code>를 호출
하게 되는데 이때, 모든 요청 헤더에 <code>Accept: application/json</code> 을
포함합니다. 새로운 item 을 만들기 위해 <code>POST</code> 요청을 보낼때도
마찬가집니다. 이때는 추가로 <code>JSON.stringify(model)</code> 을 POST body 에
넣고, <code>Content-type: application/json</code> 헤더를 포함합니다.</p>

<p>```</p>

<h1>part of request header</h1>

<p>Accept  application/json, text/javascript, <em>/</em>; q=0.01
Content-Type    application/json; charset=UTF-8
X-Requested-With    XMLHttpRequest
```</p>

<p>```</p>

<h1>request body</h1>

<p>{"qid":"1","status":"reopen","comment":""}
```</p>

<p>server 에서 이런 데이터를 받아서 처리해야 하는(deserialize/serialize)
자잘함을 피하기 위해 저는
<a href="http://search.cpan.org/~bobtfish/Catalyst-Action-REST-0.96/lib/Catalyst/Controller/REST.pm">Catalyst::Controller::REST</a> 를
사용했습니다. 요청/응답 헤더에서 사용가능한 "Accept"를 확인하고
serialize/deserialize 를 자동으로 해주기 때문에 편리합니다.</p>

<h3>Client-side</h3>

<p><img src="https://lh5.googleusercontent.com/--90Nykdhcvc/T0IyuoSwCeI/AAAAAAAAABg/V0Lp1rRzJXE/preview-backbone-note.png" alt="preview" /></p>

<ul>
<li>상태 및 코멘트를 <code>note</code> 라 하겠습니다.</li>
<li>위 그림처럼 한화면에 보여지는 <code>note</code>의 집합(또는 컬렉션)을 <code>query</code>
라 하겠습니다.</li>
</ul>


<p><code>http://example.com/#/query/:id</code> url 을 감지하고 원하는 event 를 발생
시켜야 합니다. 그러기 위해선 <code>Backbone.Router</code> 를 확장해서 app 전용
router 를 만들어야 합니다.</p>

<p>```coffeescript
class MyModel extends Backbone.Model</p>

<p>class MyCollection extends Backbone.Collection
  model: MyModel</p>

<p>class MyRouter extends Backbone.Router
  routes:</p>

<pre><code>'/query/:id': 'query'
</code></pre>

<p>  query: (id) =></p>

<pre><code># do something
coll = new MyCollection
coll.url = "/query/#{id}"
coll.fetch
  success: (c, res) -&gt;
    new MyView { collection: c }
  error: (c, res) -&gt;
    # error handling
</code></pre>

<p>```</p>

<p><code>http://example.com/#/query/2</code> 일때, <code>GET /query/2</code> 하고 응답이
정상이면 <code>MyView</code> 를 만듭니다. view 가 초기화될때, render 를 호출하면
DOM 이 알맞게 슥슥 바뀌게 됩니다. 일반적으로 <code>collection.models</code> 를
순회하면서 html element 를 구성하고 특정 #id 에 append 합니다.</p>

<p>```coffeescript
class MyView extends Backbone.View
  initialize: -></p>

<pre><code>do @render
</code></pre>

<p>  template:</p>

<pre><code>'''
   is 
'''
</code></pre>

<p>  render: =></p>

<pre><code>_.each @collection.models, (item) =&gt;
  # 템플릿을 사용해서 슥슥하면 편리합니다. 예를들어..
  html += Mustache.render(@template, { foo: 'hello', bar: 'world' }) # hello is world
  # 일반적으론 이렇게는 직접 데이터를 구성하지는 않겟고, item 을 사용하겟죠
  @delegateEvents() # event 처리에 대한 꼼순데 생략
  @ # render 의 마지막에 this 를 return 함으로써 jquery chain 을 사용할 수 있도록 합니다.
</code></pre>

<p>```</p>

<p><a href="http://documentcloud.github.com/backbone/">backbone.js</a> 을 사용한 부분의 코드입니다. 조금
헷갈리수도 있는게, <a href="http://requirejs.org/">Require.js</a>를 사용해서 <code>define</code>,
<code>order!</code> 같은 구문이 거슬릴 수도 있습니다만, 바다와 같은 마음으로
이해해 주세요.</p>

<p><div><script src='https://gist.github.com/1868873.js?file='></script>
<noscript><pre><code>require [
  &quot;jquery&quot;,
  &quot;routers/root&quot;
], ($, Router) -&gt;
  $(document).ready -&gt;
    new Router
    Backbone.history.start()
</code></pre></noscript></div>
</p>

<h2>결론 및 느낀점</h2>

<ul>
<li>jquery plugin 으로 작성했을때 보다 복잡성은 줄어들고 코드의 양은 2/3
정도로 줄어듬</li>
<li>확장이 용이 해졌음, 더 복잡한 UI 에 대한 자신감 up</li>
<li>js 가 웹애플리케이션의 일부분이 되어버림</li>
<li>jquery plugin 과 달리 재사용을 쉽게 못함</li>
<li>서버 구현에 있어서 sync 를 위해서 RESTful하게 설계되어야함</li>
<li>rails 후렌들리</li>
<li>perl 로도 요런거 graceful 하게 할 수 있음</li>
<li>요즘들어 ruby 에 많은 관심이 감</li>
<li>JST(Javascript Template)를 사용하면 more graceful, 허놔 그것은 rails
only</li>
<li>template engine 바꿔 낄 수 있음</li>
</ul>


<h2>See also</h2>

<ul>
<li><a href="http://documentcloud.github.com/backbone/">backbone.js</a></li>
<li><a href="http://backbonetutorials.com/">Backbone.js Tutorials</a></li>
<li><a href="http://arturadib.com/hello-backbonejs/">Hello Backbone.js Tutorial</a></li>
<li><a href="http://liquidmedia.ca/blog/2011/01/backbone-js-part-1/">An Intro to Backbone.js: Part 1</a></li>
<li><a href="http://liquidmedia.ca/blog/2011/01/an-intro-to-backbone-js-part-2-controllers-and-views/">An Intro to Backbone.js: Part 2</a></li>
<li><a href="http://liquidmedia.ca/blog/2011/02/backbone-js-part-3/">An Intro to Backbone.js: Part 3</a></li>
<li><a href="http://www.jamesyu.org/2011/01/27/cloudedit-a-backbone-js-tutorial-by-example/">Backbone.js Tutorial with Rails Part 1</a></li>
<li><a href="http://www.jamesyu.org/2011/02/09/backbone.js-tutorial-with-rails-part-2/">Backbone.js Tutorial with Rails Part 2</a></li>
<li><a href="https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites">blog posts and example sites</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
