<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Silex Blog]]></title>
  <link href="http://silexkr.github.com/atom.xml" rel="self"/>
  <link href="http://silexkr.github.com/"/>
  <updated>2012-02-21T11:55:46+09:00</updated>
  <id>http://silexkr.github.com/</id>
  <author>
    <name><![CDATA[Silex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IRC bot]]></title>
    <link href="http://silexkr.github.com/blog/2012/02/21/irc-bot/"/>
    <updated>2012-02-21T10:06:00+09:00</updated>
    <id>http://silexkr.github.com/blog/2012/02/21/irc-bot</id>
    <content type="html"><![CDATA[<p>IRC 에는 많은 봇들이 살고 있습니다.</p>

<p>봇은 일반적으로 regex rule과 callback을 등록해두고 해당하는 대화
내용이 나오면 callback 이 실행되는 구조를 가집니다.</p>

<p>여기서는 두개의 오픈소스 봇을 소개하고 어떻게 deploy 할 것인지에 대해
다룹니다.</p>

<h2>Hongbot</h2>

<p><a href="http://search.cpan.org/~mlehmann/AnyEvent-6.14/lib/AnyEvent.pm">AnyEvent</a> 모듈 기반이고 perl로 만들어졌습니다.</p>

<p><a href="http://search.cpan.org/~dmaki/Morris-0.01000_01/lib/Morris.pm">Morris</a> -> <a href="http://search.cpan.org/~aanoaa/Horris-v0.1.2/lib/Horris.pm">Horris</a> -> <a href="https://github.com/aanoaa/Hongbot">Hongbot</a> 의 계보를
가지고 있습니다. plugin 파일을 만들어서 확장할 수 있습니다.</p>

<h3>plugins</h3>

<ul>
<li>Ascii</li>
<li>Eval</li>
<li>Hello</li>
<li>Mac</li>
<li>Map</li>
<li>MetaCPAN</li>
<li>Mustache</li>
<li>Shorten</li>
<li>Twitter</li>
<li>Youtube</li>
</ul>


<h3>run</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:aanoaa/Hongbot.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>Hongbot/
</span><span class='line'><span class="nv">$ </span>carton install <span class="c"># Carton 이 설치되어 잇어야..</span>
</span><span class='line'><span class="nv">$ </span>vim conf/hongbot.conf <span class="c"># 서버, 채널, password 등을 변경해야..</span>
</span><span class='line'><span class="nv">$ </span>./run
</span></code></pre></td></tr></table></div></figure>


<h2>hubot</h2>

<p><a href="https://github.com/">Github</a>에서 공개한 CoffeeScript 로 쓰여진 node.js 기반의 bot
입니다. core인 <a href="https://github.com/github/hubot">hubot</a> 이 있고 <a href="https://github.com/github/hubot-scripts">hubot-scripts</a>
를 통해 확장 가능합니다. adapter 를 설정해서 irc 뿐만아니라 campfire,
gtalk 에서도 사용가능 합니다. 물론 adapter 또한 확장 가능 합니다.</p>

<h3>scripts</h3>

<p><a href="http://hubot-script-catalog.herokuapp.com/">hubot-scripts catalog</a></p>

<h3>지속가능한 운영의 묘</h3>

<p><a href="https://github.com/github/hubot">hubot</a>의 README 를 보면 tarball 을 Download 받아서 하라고
하는데, 그렇게 하면 npm을 통해서 <a href="http://search.npmjs.org/#/hubot-scripts">hubot-scripts</a>
가 설치되기 때문에 자신의 확장 scripts 를 사용할 수 없습니다.</p>

<p>해서,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/github/hubot.git
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/github/hubot-scripts.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>hubot-scripts/
</span><span class='line'><span class="nv">$ </span>npm install <span class="c"># npm 이 설치되어 잇어야 합니다.</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>hubot/
</span><span class='line'><span class="nv">$ </span>mkdir /path/to/deploy/hubot
</span><span class='line'><span class="nv">$ </span>./bin/hubot -c /path/to/deploy/hubot
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/deploy/hubot
</span><span class='line'><span class="nv">$ </span>npm install
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>node_modules
</span><span class='line'><span class="nv">$ </span>rm -rf hubot-scripts/ <span class="c"># npm의 hubot-scripts 대신에 clone 받은 hubot-scripts 를 사용합니다.</span>
</span><span class='line'><span class="nv">$ </span>ln -s /path/to/hubot-scripts hubot-scripts <span class="c"># 아까 clone 받은 repo</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ../
</span><span class='line'><span class="nv">$ </span>vim hubot-scripts.json
</span><span class='line'>    <span class="c"># /path/to/hubot-scripts/src/scripts/*.coffee 사용가능</span>
</span><span class='line'>    <span class="c"># [&quot;foo.coffee&quot;, &quot;bar.coffee&quot;] 등등..</span>
</span><span class='line'><span class="nv">$ </span>./bin/hubot
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/github/hubot-scripts">hubot-scripts</a>를 fork 해서 사용하는게 유리합니다.
github:hubot-scripts 를 remote 로 등록해서 꾸준히 추가되는 script를
쓸수도 있고 내가 작성한 script도 쓸 수 있으니까여</p>

<h2>plugin, script 의 단순함 비교</h2>

<h3>hongbot Eval.pm</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">package</span> <span class="nn">Hongbot::Plugin::</span><span class="n">Eval</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">URI</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">JSON</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Moose</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">AnyEvent::</span><span class="n">HTTP</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">namespace::</span><span class="n">autoclean</span><span class="p">;</span>
</span><span class='line'><span class="n">extends</span> <span class="s">&#39;Hongbot::Plugin&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">with</span> <span class="s">&#39;MooseX::Role::Pluggable::Plugin&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">has</span> <span class="n">uri</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">is</span> <span class="o">=&gt;</span> <span class="s">&#39;ro&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">isa</span> <span class="o">=&gt;</span> <span class="s">&#39;URI&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">default</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="n">URI</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="s">&quot;http://api.dan.co.jp/lleval.cgi&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">has</span> <span class="n">prefix</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">is</span> <span class="o">=&gt;</span> <span class="s">&#39;ro&#39;</span><span class="p">,</span> <span class="n">isa</span> <span class="o">=&gt;</span> <span class="s">&#39;Str&#39;</span><span class="p">,</span> <span class="n">default</span> <span class="o">=&gt;</span> <span class="s">&quot;#!/usr/bin/perl\n&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">override</span> <span class="s">&#39;usage&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s">&quot;%s: eval &lt;PERL_CODE&gt;&quot;</span><span class="p">,</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="n">override</span> <span class="s">&#39;regex&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="sx">qr/^eval\s+/</span><span class="n">i</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">respond</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$cl</span><span class="p">,</span> <span class="nv">$channel</span><span class="p">,</span> <span class="nv">$nickname</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$msg</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">rm_prefix</span><span class="p">(</span><span class="nv">$self</span><span class="o">-&gt;</span><span class="n">regex</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">unless</span> <span class="nv">$msg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$msg</span> <span class="o">=</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">prefix</span> <span class="o">.</span> <span class="nv">$msg</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">uri</span><span class="o">-&gt;</span><span class="n">query_form</span><span class="p">(</span><span class="n">s</span> <span class="o">=&gt;</span> <span class="nv">$msg</span><span class="p">);</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$guard</span><span class="p">;</span> <span class="nv">$guard</span> <span class="o">=</span> <span class="n">http_get</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">uri</span><span class="p">,</span> <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>        <span class="nb">undef</span> <span class="nv">$guard</span><span class="p">;</span>
</span><span class='line'>        <span class="k">my</span> <span class="p">(</span><span class="nv">$body</span><span class="p">,</span> <span class="nv">$headers</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$headers</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">Status</span><span class="p">}</span> <span class="o">=~</span> <span class="sr">m/^2/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">$scalar</span> <span class="o">=</span> <span class="nn">JSON::</span><span class="n">from_json</span><span class="p">(</span><span class="nv">$body</span><span class="p">);</span>
</span><span class='line'>            <span class="k">my</span> <span class="nv">@eval</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">map</span> <span class="p">{</span> <span class="nb">push</span> <span class="nv">@eval</span><span class="p">,</span> <span class="s">&quot;$_: $scalar-&gt;{$_}&quot;</span> <span class="p">}</span> <span class="sx">qw/lang status stderr stdout syscalls time/</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">to_channel</span><span class="p">(</span><span class="nv">$cl</span><span class="p">,</span> <span class="nv">$channel</span><span class="p">,</span> <span class="nv">@eval</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">to_channel</span><span class="p">(</span><span class="nv">$cl</span><span class="p">,</span> <span class="nv">$channel</span><span class="p">,</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s">&quot;httpCode: %d&quot;</span><span class="p">,</span> <span class="nv">$headers</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">Status</span><span class="p">}));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">__PACKAGE__</span><span class="o">-&gt;</span><span class="n">meta</span><span class="o">-&gt;</span><span class="n">make_immutable</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>hubot eval.coffee</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># evaluate code.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># eval me &lt;lang&gt; &lt;code&gt; - evaluate &lt;code&gt; and show the result.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(robot) -&gt;</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">respond</span> <span class="sr">/eval( me)? ([^ ]+) (.+)/i</span><span class="p">,</span> <span class="nf">(msg) -&gt;</span>
</span><span class='line'>    <span class="nx">msg</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">http</span><span class="p">(</span><span class="s2">&quot;http://api.dan.co.jp/lleval.cgi&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="nv">s: </span><span class="s2">&quot;#!/usr/bin/#{msg.match[2]}\n#{msg.match[3]}&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">get</span><span class="p">()</span> <span class="nf">(err, res, body) -&gt;</span>
</span><span class='line'>        <span class="nv">out = </span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="k">if</span> <span class="nx">out</span><span class="p">.</span><span class="nx">stderr</span> <span class="k">then</span> <span class="nx">out</span><span class="p">.</span><span class="nx">stderr</span> <span class="k">else</span> <span class="nx">out</span><span class="p">.</span><span class="nx">stdout</span>
</span></code></pre></td></tr></table></div></figure>


<p>네 <a href="https://github.com/github/hubot">hubot</a> 이 훨씬 단순합니다.
core 의 설계가 더 유연하고 잘되어 있어서 그렇다고 생각합니다.
<a href="https://github.com/aanoaa/Hongbot">Hongbot</a>은 저혼자 하고 <a href="https://github.com/github/hubot">hubot</a>은 세계의 여러 해커들이
참여하는 프로젝트니까 뭐 비교하면 저만
초라해집니다. <a href="https://github.com/aanoaa/Hongbot">Hongbot</a>의 core 를 업그레이드 시켜서
<a href="https://github.com/github/hubot">hubot</a> 만큼 단순하게 plugin 을 작성할 수 있게 하면 좋은 plugin
들이 많이 생겨날 것으로 생각합니다. repo 와 deploy 디렉토리를 따로
둘수 있게 만든 점 또한 <a href="https://github.com/github/hubot">hubot</a>++ 입니다. 배울게 참 많습니다.</p>

<h2>결론</h2>

<p>여보 아버님채널에 bot 한마리 놔드려야 겠어요</p>

<h2>See also</h2>

<ul>
<li><a href="http://theprogrammingbutler.com/blog/archives/2011/10/28/hubot-scripts-explained/">hubot Scripts Explained</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guest Speech #1 - G사 S님]]></title>
    <link href="http://silexkr.github.com/blog/2012/02/19/guest-speech-number-1/"/>
    <updated>2012-02-19T16:55:00+09:00</updated>
    <id>http://silexkr.github.com/blog/2012/02/19/guest-speech-number-1</id>
    <content type="html"><![CDATA[<p>  지난 13일 CEO @y0gnbin 의 지인인 G 사 S모님을 초청해서 <code>서버 가상화</code>에 대한 이런 저런 얘기를 들을 수 있었습니다.</p>

<p>  실제로 CentOS 5.7 에 기본으로 세팅된 환경 아래에서 실제로 Dom-U 를 만드는 과정과 주의점 등등에 대한 이야기가 주를 이뤘습니다.</p>

<p>  물론 그 뒤에는 단순히 Xen 환경 구축에 관한 이야기 뿐만 아니라, G 사에 Xen 을 도입한 이야기, 그리고 G 사에서 오픈소스를 본격적으로 채용함으로 얻은 이런저런 메리트. 그리고 작은 회사에서는 감히 엄두도 못 낼 장비 스펙과 비용, 많은 성공사례와 오픈소스 도입에 이르기까지의 계측된 데이터와 검증 방법&#8230;</p>

<p>  또한 서버구입시에 참고할 만한 스펙비교 방법도 전수받게 되었습니다.</p>

<ul>
<li><a href="http://www.spec.org/">http://www.spec.org/</a></li>
</ul>


<p>  아무튼 이런저런 돈주고도 쉽게 못 들을 이런저런 얘기는 장소를 바꿔가며 새벽 2시까지 이어갔고, 그때가 되어서야 해산을 했습니다.</p>

<p>  <blockquote class="twitter-tweet"><p>Silex 외부연사 초청 강연회 준비&#8230; w/ @<a href="https://twitter.com/luzluna">luzluna</a> @<a href="https://twitter.com/keedi">keedi</a> @<a href="https://twitter.com/y0ngbin">y0ngbin</a> @<a href="https://twitter.com/rumidier">rumidier</a></p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/169021093208788992" data-datetime="2012-02-13T11:32:23+00:00">February 13, 2012</a></blockquote></p>

<blockquote class="twitter-tweet"><p>silex 외부연사 초청강연 및 간담회 끝</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/169082207439298563" data-datetime="2012-02-13T15:35:14+00:00">February 13, 2012</a></blockquote>




<blockquote class="twitter-tweet"><p>w/ @<a href="https://twitter.com/luzluna">luzluna</a> @<a href="https://twitter.com/keedi">keedi</a> @<a href="https://twitter.com/y0ngbin">y0ngbin</a> shs님 (@ Caffé bene) [pic]: <a href="http://t.co/vla9d6P2" title="http://4sq.com/xYJMn7">4sq.com/xYJMn7</a></p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/169085458905702402" data-datetime="2012-02-13T15:48:09+00:00">February 13, 2012</a></blockquote>




<blockquote class="twitter-tweet"><p>간담회 2차끝. 귀가</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/169104418652946432" data-datetime="2012-02-13T17:03:29+00:00">February 13, 2012</a></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[backbone.js]]></title>
    <link href="http://silexkr.github.com/blog/2012/02/17/backbone-dot-js/"/>
    <updated>2012-02-17T19:39:00+09:00</updated>
    <id>http://silexkr.github.com/blog/2012/02/17/backbone-dot-js</id>
    <content type="html"><![CDATA[<h2>배경</h2>

<p>아 <a href="http://documentcloud.github.com/backbone/">backbone.js</a> 가 만들어진 배경이 아니라, 제가 사용하게 된
배경입니다. 회사에서 진행하는 <code>javascript</code> 를 나름 무겁게 사용하는
프로젝트가 있습니다. &#8220;갑&#8221;님의 요구사항이 날이 갈수록 복잡해 짐에 따라
<code>jquery</code> 플러그인도 맨들고, <code>require.js</code> 를 사용해서 파일을 조직화해서
사용하고 있었습니다만 <code>$.ajax</code> 에 대한 callback 이 늘어남에 따라 점점
코드의 복잡도가 증가해서 해결해야 될 문제라고 생각했습니다.</p>

<p><a href="https://trello.com/">Trello</a> 에서
<a href="http://blog.fogcreek.com/the-trello-tech-stack/">The Trello Tech Stack</a>
<a href="http://documentcloud.github.com/backbone/">backbone.js</a>를 쓴다는 글을 보고 사용방법을 좀
알아보았습니다.</p>

<p><img src="http://blog.fogcreek.com/wp-content/uploads/2012/01/trello-freehand.jpg" alt="Trello Early Architecture Drawing" /></p>

<h2>자세한 설명은 (몰라서)생략</h2>

<p>왜 쓰는지 뭔가 좋은지 그런거 모릅니다. 여기서는 어떻게 사용하는지만
다룹니다. 검색 ㄱㄱ</p>

<p><img src="https://lh5.googleusercontent.com/-i82V0GanZr4/T0IfDIDWq6I/AAAAAAAAABY/VnAii_7ds5E/no_more_details.jpg" alt="자세한 설명은 생략한다" /></p>

<h2>맨든사람</h2>

<p><a href="https://twitter.com/#!/jashkenas">Jeremy Ashkenas - Twitter</a>,
<a href="https://github.com/jashkenas/">Jeremy Ashkenas - Github</a></p>

<p>요즘 가장 인기있는 코딩왕이 아닐까 합니다.</p>

<ul>
<li><a href="http://coffeescript.org/">CoffeeScript</a></li>
<li><a href="http://documentcloud.github.com/underscore/">underscore.js</a></li>
<li><a href="http://documentcloud.github.com/backbone/">backbone.js</a></li>
</ul>


<p>위에 세개다 저 사람이 맨들었답니다.</p>

<h2>돈워리</h2>

<p><a href="http://documentcloud.github.com/backbone/#examples">http://documentcloud.github.com/backbone/#examples</a></p>

<ul>
<li>FourSuare</li>
<li>LinkedIn</li>
<li>37 Signals</li>
<li>Trello</li>
<li>Silex(끼워 넣어 봅니다)</li>
<li>&#8230;</li>
</ul>


<p>등에서 이미 쓰이고 있다고..</p>

<h2>연습삼아 맨든 프로젝트</h2>

<p>일단 <a href="http://coffeescript.org/">CoffeeScript</a>만세라서
<a href="http://coffeescript.org/">CoffeeScript</a>로 구현하였습니다.</p>

<p><a href="http://aanoaa.github.com/jquery-note/">jquery-note plugin</a>을 다시
한번 만들어 봤습니다.</p>

<h3>Server-side</h3>

<p><img src="https://lh5.googleusercontent.com/-_aPZkJJp5LI/T0I_SRERM-I/AAAAAAAAABo/k_WLzmWNs08/s1024/res-res.example.png" alt="server-side" /></p>

<p>RESTful 하게 구현되어야 합니다. <a href="http://documentcloud.github.com/backbone/">backbone.js</a>의 <code>model</code>과
<code>collection</code>은 url 규약을 가지고 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># http://documentcloud.github.com/backbone/#Sync
</span><span class='line'>The default sync handler maps CRUD to REST like so:
</span><span class='line'>
</span><span class='line'>create → POST   /collection
</span><span class='line'>read → GET   /collection[/id]
</span><span class='line'>update → PUT   /collection/id
</span><span class='line'>delete → DELETE   /collection/id</span></code></pre></td></tr></table></div></figure>


<p>좀 간단하게 말하면 위에선 언급한 구조의 HTTP method 와 url 규약을
지키고, 요청 헤더의 <code>Accept</code>에 걸맞는 응답을 줘야 합니다.</p>

<p>서버와 sync 를 하기 위해 <code>model.save()</code> 또는 <code>collection.fetch()</code>를 호출
하게 되는데 이때, 모든 요청 헤더에 <code>Accept: application/json</code> 을
포함합니다. 새로운 item 을 만들기 위해 <code>POST</code> 요청을 보낼때도
마찬가집니다. 이때는 추가로 <code>JSON.stringify(model)</code> 을 POST body 에
넣고, <code>Content-type: application/json</code> 헤더를 포함합니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># part of request header
</span><span class='line'>Accept    application/json, text/javascript, */*; q=0.01
</span><span class='line'>Content-Type  application/json; charset=UTF-8
</span><span class='line'>X-Requested-With  XMLHttpRequest</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># request body
</span><span class='line'>{"qid":"1","status":"reopen","comment":""}</span></code></pre></td></tr></table></div></figure>


<p>server 에서 이런 데이터를 받아서 처리해야 하는(deserialize/serialize)
자잘함을 피하기 위해 저는
<a href="http://search.cpan.org/~bobtfish/Catalyst-Action-REST-0.96/lib/Catalyst/Controller/REST.pm">Catalyst::Controller::REST</a> 를
사용했습니다. 요청/응답 헤더에서 사용가능한 &#8220;Accept&#8221;를 확인하고
serialize/deserialize 를 자동으로 해주기 때문에 편리합니다.</p>

<h3>Client-side</h3>

<p><img src="https://lh5.googleusercontent.com/--90Nykdhcvc/T0IyuoSwCeI/AAAAAAAAABg/V0Lp1rRzJXE/preview-backbone-note.png" alt="preview" /></p>

<ul>
<li>상태 및 코멘트를 <code>note</code> 라 하겠습니다.</li>
<li>위 그림처럼 한화면에 보여지는 <code>note</code>의 집합(또는 컬렉션)을 <code>query</code>
라 하겠습니다.</li>
</ul>


<p><code>http://example.com/#/query/:id</code> url 을 감지하고 원하는 event 를 발생
시켜야 합니다. 그러기 위해선 <code>Backbone.Router</code> 를 확장해서 app 전용
router 를 만들어야 합니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyModel</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">MyCollection</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nx">MyModel</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">MyRouter</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span>
</span><span class='line'>  <span class="nv">routes:</span>
</span><span class='line'>    <span class="s1">&#39;/query/:id&#39;</span><span class="o">:</span> <span class="s1">&#39;query&#39;</span>
</span><span class='line'>  <span class="nv">query: </span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="c1"># do something</span>
</span><span class='line'>    <span class="nv">coll = </span><span class="k">new</span> <span class="nx">MyCollection</span>
</span><span class='line'>    <span class="nv">coll.url = </span><span class="s2">&quot;/query/#{id}&quot;</span>
</span><span class='line'>    <span class="nx">coll</span><span class="p">.</span><span class="nx">fetch</span>
</span><span class='line'>      <span class="nv">success: </span><span class="nf">(c, res) -&gt;</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">MyView</span> <span class="p">{</span> <span class="nv">collection: </span><span class="nx">c</span> <span class="p">}</span>
</span><span class='line'>      <span class="nv">error: </span><span class="nf">(c, res) -&gt;</span>
</span><span class='line'>        <span class="c1"># error handling</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>http://example.com/#/query/2</code> 일때, <code>GET /query/2</code> 하고 응답이
정상이면 <code>MyView</code> 를 만듭니다. view 가 초기화될때, render 를 호출하면
DOM 이 알맞게 슥슥 바뀌게 됩니다. 일반적으로 <code>collection.models</code> 를
순회하면서 html element 를 구성하고 특정 #id 에 append 합니다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">MyView</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>  <span class="nv">initialize: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">do</span> <span class="nx">@render</span>
</span><span class='line'>  <span class="nv">template:</span>
</span><span class='line'>    <span class="s1">&#39;&#39;&#39;</span>
</span><span class='line'><span class="s1">       is </span>
</span><span class='line'><span class="s1">    &#39;&#39;&#39;</span>
</span><span class='line'>  <span class="nv">render: </span><span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">_</span><span class="p">.</span><span class="nx">each</span> <span class="nx">@collection</span><span class="p">.</span><span class="nx">models</span><span class="p">,</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="c1"># 템플릿을 사용해서 슥슥하면 편리합니다. 예를들어..</span>
</span><span class='line'>      <span class="nx">html</span> <span class="o">+=</span> <span class="nx">Mustache</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">@template</span><span class="p">,</span> <span class="p">{</span> <span class="nv">foo: </span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="nv">bar: </span><span class="s1">&#39;world&#39;</span> <span class="p">})</span> <span class="c1"># hello is world</span>
</span><span class='line'>      <span class="c1"># 일반적으론 이렇게는 직접 데이터를 구성하지는 않겟고, item 을 사용하겟죠</span>
</span><span class='line'>      <span class="nx">@delegateEvents</span><span class="p">()</span> <span class="c1"># event 처리에 대한 꼼순데 생략</span>
</span><span class='line'>      <span class="err">@</span> <span class="c1"># render 의 마지막에 this 를 return 함으로써 jquery chain 을 사용할 수 있도록 합니다.</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://documentcloud.github.com/backbone/">backbone.js</a> 을 사용한 부분의 코드입니다. 조금
헷갈리수도 있는게, <a href="http://requirejs.org/">Require.js</a>를 사용해서 <code>define</code>,
<code>order!</code> 같은 구문이 거슬릴 수도 있습니다만, 바다와 같은 마음으로
이해해 주세요.</p>

<div><script src='https://gist.github.com/1868873.js?file='></script>
<noscript><pre><code>require [
  &quot;jquery&quot;,
  &quot;routers/root&quot;
], ($, Router) -&gt;
  $(document).ready -&gt;
    new Router
    Backbone.history.start()
</code></pre></noscript></div>


<h2>결론 및 느낀점</h2>

<ul>
<li>jquery plugin 으로 작성했을때 보다 복잡성은 줄어들고 코드의 양은 2/3
정도로 줄어듬</li>
<li>확장이 용이 해졌음, 더 복잡한 UI 에 대한 자신감 up</li>
<li>js 가 웹애플리케이션의 일부분이 되어버림</li>
<li>jquery plugin 과 달리 재사용을 쉽게 못함</li>
<li>서버 구현에 있어서 sync 를 위해서 RESTful하게 설계되어야함</li>
<li>rails 후렌들리</li>
<li>perl 로도 요런거 graceful 하게 할 수 있음</li>
<li>요즘들어 ruby 에 많은 관심이 감</li>
<li>JST(Javascript Template)를 사용하면 more graceful, 허놔 그것은 rails
only</li>
<li>template engine 바꿔 낄 수 있음</li>
</ul>


<h2>See also</h2>

<ul>
<li><a href="http://documentcloud.github.com/backbone/">backbone.js</a></li>
<li><a href="http://backbonetutorials.com/">Backbone.js Tutorials</a></li>
<li><a href="http://arturadib.com/hello-backbonejs/">Hello Backbone.js Tutorial</a></li>
<li><a href="http://liquidmedia.ca/blog/2011/01/backbone-js-part-1/">An Intro to Backbone.js: Part 1</a></li>
<li><a href="http://liquidmedia.ca/blog/2011/01/an-intro-to-backbone-js-part-2-controllers-and-views/">An Intro to Backbone.js: Part 2</a></li>
<li><a href="http://liquidmedia.ca/blog/2011/02/backbone-js-part-3/">An Intro to Backbone.js: Part 3</a></li>
<li><a href="http://www.jamesyu.org/2011/01/27/cloudedit-a-backbone-js-tutorial-by-example/">Backbone.js Tutorial with Rails Part 1</a></li>
<li><a href="http://www.jamesyu.org/2011/02/09/backbone.js-tutorial-with-rails-part-2/">Backbone.js Tutorial with Rails Part 2</a></li>
<li><a href="https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites">blog posts and example sites</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql ENUM and Test::*]]></title>
    <link href="http://silexkr.github.com/blog/2012/02/03/mysql-enum-and-test-star/"/>
    <updated>2012-02-03T19:06:00+09:00</updated>
    <id>http://silexkr.github.com/blog/2012/02/03/mysql-enum-and-test-star</id>
    <content type="html"><![CDATA[<h1>MySQL ENUM과 Test:: 이야기</h1>

<h2>MySQL의 ENUM type</h2>

<p> 제가 MySQL을 사용한지 약 10년 정도의 시간이 지났습니다. 처음 MySQL을
사용하던 당시 MySQL 3.X는 지금의 MySQL 5.X 버전에 비하면 DB로써
여러가지로 부족한 점이 많았습니다. - 단일 저장 engine 지원(MyISAM),
컴파일타임 전역 인코딩 지정, FK 지원, View/Trigger/SP 지원등 -
하지만 탁월한 읽기속도를 바탕으로 대중적인 몇몇 PHP 응용프로그램에 성공적으로
탑재되면서 거의 10년간 오픈소스 진영 DB의 대명사로 자리를 잡았고 그동안
많은 우여곡절에도 꾸준히 발전해 현재는 상용 DB와 견주어도 부족하지 않은
다양한 기능을 제공하고 있습니다.</p>

<p> 하지만 개인적으로 그동안 MySQL에 추가된 좋은 최신의 기능들 보다 MySQL
이라는 DB를 떠올리면 가장 먼저 머리속에 떠오르는 애증의 기능이 하나 있습니다.
그것은 바로 오늘 소개할 <code>ENUM</code>이라는 자료형입니다.</p>

<p><code>ENUM</code>은 C 언어, Java등에서 이미 널리 사용되고 있는 enumeration을 의미하는 자료형으로
MySQL에서 <code>ENUM</code>은 단일 컬럼에 미리 지정한 자료만 저장 가능하도록 하는 특수 자료형 입니다.
MySQL.com 에서는 <code>ENUM</code>을 다음과 같이 소개하고 있습니다.</p>

<p>  An ENUM is a string object with a value chosen from a list of permitted values that are enumerated
  explicitly in the column specification at table creation time.</p>

<p><code>ENUM</code> 자료형을 사용할 때 얻을 수 있는 장점은 다음과 같습니다.</p>

<ol>
<li>Text(varchar,char,text)로 값을 저장하는것에 비해 자료의 정합성을 높힐 수 있다</li>
<li>Text + FK 으로 설계하는 것에 비해 Table수를 줄일 수 있다.</li>
<li>enum index 를 통한 연산을 사용할 수 있다.</li>
</ol>


<p> 첫번째 장점은 부연설명이 필요없는 장점입니다. text field 컬럼은 사실상 너무 많이 가능성이 열려있는
컬럼이기 때문에 아무리 응용프로그램에서 정합성을 체크해도 조금만 실수하면 바로 엉뚱한 값들이
들어와 속을 썩이기 마련입니다. 두번째는 조금 논쟁이 있을 수 있는 내용입니다. 사실 앞서 설명한
정합성에 대한 문제를 정석으로 해결하는 방법은 해당 컬럼에 들어올 수 있는 값을 row로 가진 별도의 자료 테이블을
생성하고 그 컬럼에서 FK 제약 조건을 통해 정합성을 확보하는 방식입니다. 이 방식은 어떤 DBMS에서도
사용할수 있는 방법이기 때문에 이식성이 뛰어나다는 장점이 있습니다. 하지만 그런 형태의 제약의 수가 아주 많다면
그 수만큼 테이블이 늘어나거나 혹은 메타정보를 관리하는 별도 테이블을 두고 관리해야 하기 때문에 번거롭습니다.
하지만 <code>ENUM</code>자료 형을 사용할 경우 상대적으로 적은 비용으로 원하는 바를 얻을 수 있기 때문에 경우에 따라서는
훌륭한 대안입니다. 세번째 장점은 의외로 모르는 분들이 많은 기능이지만 개인적으로 MySQL <code>ENUM</code> 자료형의
가장 멋진 기능이라고 생각하는 기능입니다. enum index란 <code>ENUM</code>으로 정의된 컬럼에 입력과 출력에 있어서
지정된 &#8216;값&#8217; 자체 뿐만 아니라 색인(index)값을 이용해 해당 값에 접근할 수 있는 색인을 말합니다. 예를 들면</p>

<pre><code>+-------+-------------------+------+-----+---------+----------------+
| Field | Type              | Null | Key | Default | Extra          |
+-------+-------------------+------+-----+---------+----------------+
| id    | int(11) unsigned  | NO   | PRI | NULL    | auto_increment |
| c1    | enum('a','b','c') | YES  |     | NULL    |                |
+-------+-------------------+------+-----+---------+----------------+
</code></pre>

<p>다음 질의와 결과는 아래와 같습니다.</p>

<pre><code>SELECT id,c1,c1+0 FROM `t1`
+----+------+------+
| id | c1   | c1+0 |
+----+------+------+
|  1 | a    |    1 |
|  2 | b    |    2 |
|  3 | c    |    3 |
+----+------+------+
</code></pre>

<p>그후 다음 질의와 결과는 다음과 같습니다.</p>

<pre><code>INSERT INTO t1(c1) VALUES(1);
SELECT id,c1,c1+0 FROM `t1`
+----+------+------+
| id | c1   | c1+0 |
+----+------+------+
|  1 | a    |    1 |
|  2 | b    |    2 |
|  3 | c    |    3 |
|  4 | a    |    1 |
+----+------+------+
</code></pre>

<p>이처럼 SELECT 문에서 <code>ENUM</code> 자료형 컬럼에 숫자 연산을 하면 색인값을 반환합니다. 마찬가지로 INSERT / UPDATE 문에서
<code>ENUM</code> 자료형 컬럼에 색인을 넣으면 자동으로 해당 컬럼을 넣어줍니다. 이런 특징은 특히 웹 프로그래밍에서 HTML의
Input 요소중 Radio 요소와 아주 궁합이 잘 맞습니다. 예를들면 위에 설명한 c1 컬럼에 값을 넣는
Radio 요소는 다음과 같이 단순하게 작성할 수 있습니다.</p>

<pre><code> &lt;input type="radio" id="c11" name="c1" value="1"&gt; a
 &lt;input type="radio" id="c12" name="c1" value="2"&gt; b
 &lt;input type="radio" id="c13" name="c1" value="3"&gt; c
</code></pre>

<p>이런 방식은 Radio 요소를 많게는 수백개 이상 다뤄야하는 그동안의 작업을 아주 단순하게 만들어 줬습니다.</p>

<h2>Perl test code</h2>

<p>이 포스트는 단순한 <code>ENUM</code> 자료형의 장점뿐만 아니라 그동안 이 자료형을 사용하면서 만났던
몇가지 문제들을 알아보고 재현할 수 있는 perl 코드를 작성해보는것을 목적으로 하고 있습니다.
이런 형태의 문제들은 주로 사용 초기에 발견되지 않고 오랜 기간 수정과 삭제를 반복하다가 발견하곤
하는데 문제에 대한 명확한 재현이 없이는 기존 자료에서 잘못된 내용을 찾는것도 쉽지 않고 같은
실수를 회피하도록 코드를 작성하는데도 많은 어려움이 있었기 때문에 따로 시간을 내서
발생하는 현상에 대해 재현할 수 있는 코드를 작성했습니다.</p>

<p>코드에는 평소에 제가 즐겨쓰는 몇가지 모듈이 사용됩니다. <a href="http://metacpan.org/module/Test::Most">Test::Most</a>, <a href="http://metacpan.org/module/DBIx::Simple">DBIx::Simple</a>,
<a href="http://metacpan.org/module/SQL::Abstract">SQL::Abstract</a>, <a href="http://metacpan.org/module/Test::Databaserow">Test::DatabaseRow</a></p>

<ul>
<li>Test::Most는 Test::More와 이름이 거의 흡사하지만 자주 사용하는 Test::Differences,Test::Deep,Test::Exception 등을
같이 불러주기 때문에 습관적으로 사용합니다.</li>
<li>DBIx::Simple + SQL::Abstract는 복잡하게 ORM을 사용하지 않고 간편하게 DB에 값을 주고 받을 때 사용합니다.</li>
<li>Test::DatabaseRow는 DB의 구조가 아닌 <code>값</code>을 기준으로 검증코드를 만들고자 할때 사용합니다. 최근에 특정작업을 진행
하면서 많이 사용하게 되었습니다.</li>
<li>테스트 코드를 작성할 때 반복사용되는 부분은 최대한 함수로 분리를 하고 실제 검증이 들어가는 부분은
가능하면 block({,})으로 scope를 분리시키면 비슷한 시도의 검증코드를 다수 만들때 복사해서 붙이기 용이합니다.
( &#8220;특히 subtest를 사용하면 test를 개념적으로 분리할 수 있어 더욱 좋다&#8221; by @JEEN_LEE )</li>
</ul>


<h2>Code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Most</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">DatabaseRow</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Test::</span><span class="n">Group</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">DBIx::</span><span class="n">Simple</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">SQL::</span><span class="n">Abstract</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Const::</span><span class="n">Fast</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">const</span> <span class="k">my</span> <span class="nv">$DATABASE</span> <span class="o">=&gt;</span> <span class="s">&#39;testdb&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">const</span> <span class="k">my</span> <span class="nv">$TABLE</span>    <span class="o">=&gt;</span> <span class="s">&#39;t1&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">const</span> <span class="k">my</span> <span class="nv">$COLUMN</span>   <span class="o">=&gt;</span> <span class="s">&#39;c1&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">const</span> <span class="k">my</span> <span class="nv">$DBHOST</span> <span class="o">=&gt;</span> <span class="s">&#39;127.0.0.1&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">const</span> <span class="k">my</span> <span class="nv">$DBUSER</span> <span class="o">=&gt;</span> <span class="s">&#39;root&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">const</span> <span class="k">my</span> <span class="nv">$DBPASS</span> <span class="o">=&gt;</span> <span class="sx">q()</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">$db</span> <span class="o">=</span> <span class="nn">DBIx::</span><span class="n">Simple</span><span class="o">-&gt;</span><span class="nb">connect</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;DBI:mysql:host=$DBHOST&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$DBUSER</span><span class="p">,</span> <span class="nv">$DBPASS</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">mysql_enable_utf8</span>    <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="n">mysql_auto_reconnect</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">)</span> <span class="ow">or</span> <span class="nb">die</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db</span><span class="o">-&gt;</span><span class="n">abstract</span> <span class="o">=</span> <span class="nn">SQL::</span><span class="n">Abstract</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span> <span class="p">{</span> <span class="n">quota_char</span> <span class="o">=&gt;</span> <span class="s">&#39;`&#39;</span><span class="p">,</span> <span class="n">name_sep</span> <span class="o">=&gt;</span> <span class="s">&#39;.&#39;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">local</span> <span class="nv">$</span><span class="nn">Test::DatabaseRow::</span><span class="nv">dbh</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="n">dbh</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">subtest</span> <span class="s">&quot;enum column에 컬럼 추가가 발생한경우(POST)&quot;</span> <span class="o">=&gt;</span>  <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="mi">1</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">},</span>
</span><span class='line'>        <span class="mi">2</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">},</span>
</span><span class='line'>        <span class="mi">3</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">3</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">initialize</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | Field | Type              | Null | Key | Default | Extra          |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | id    | int(11) unsigned  | NO   | PRI | NULL    | auto_increment |</span>
</span><span class='line'><span class="c1">#    | c1    | enum(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) | YES  |     | NULL    |                |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">insert_values</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_value</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_index</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;ALTER TABLE `$TABLE` CHANGE `$COLUMN` `$COLUMN` ENUM(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;)  NULL  DEFAULT NULL&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#    +-------+-------------------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | Field | Type                          | Null | Key | Default | Extra          |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | c1    | enum(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;) | YES  |     | NULL    |                |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------------------+------+-----+---------+----------------+</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">test_column_value</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_index</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">subtest</span> <span class="s">&quot;enum column에 컬럼 추가가 발생한경우(PRE)&quot;</span> <span class="o">=&gt;</span>  <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="mi">1</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">},</span>
</span><span class='line'>        <span class="mi">2</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">},</span>
</span><span class='line'>        <span class="mi">3</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">3</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">initialize</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | Field | Type              | Null | Key | Default | Extra          |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | id    | int(11) unsigned  | NO   | PRI | NULL    | auto_increment |</span>
</span><span class='line'><span class="c1">#    | c1    | enum(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) | YES  |     | NULL    |                |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">insert_values</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_value</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_index</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;ALTER TABLE `$TABLE` CHANGE `$COLUMN` `$COLUMN` ENUM(&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)  NULL  DEFAULT NULL&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#    +-------+-------------------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | Field | Type                          | Null | Key | Default | Extra          |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | c1    | enum(&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) | YES  |     | NULL    |                |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------------------+------+-----+---------+----------------+</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">test_column_value</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_index</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span> <span class="c1"># Fail</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">subtest</span> <span class="s">&quot;enum column에 숫자 이름의 컬럼이 들어간 경우(1,2,3)&quot;</span> <span class="o">=&gt;</span>  <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="mi">1</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">},</span>
</span><span class='line'>        <span class="mi">2</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">},</span>
</span><span class='line'>        <span class="mi">3</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;3&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">3</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">initialize</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | Field | Type              | Null | Key | Default | Extra          |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | id    | int(11) unsigned  | NO   | PRI | NULL    | auto_increment |</span>
</span><span class='line'><span class="c1">#    | c1    | enum(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;) | YES  |     | NULL    |                |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">insert_values</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_value</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_index</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1(id,c1) VALUES(4,1)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">all_row_ok</span><span class="p">(</span>
</span><span class='line'>        <span class="n">table</span>       <span class="o">=&gt;</span> <span class="nv">$TABLE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">where</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">4</span> <span class="p">],</span>
</span><span class='line'>        <span class="n">tests</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="nv">$COLUMN</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">],</span>
</span><span class='line'>        <span class="n">description</span> <span class="o">=&gt;</span> <span class="s">&quot;if input just 1&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1(id,c1) VALUES(5,&#39;1&#39;)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">all_row_ok</span><span class="p">(</span>
</span><span class='line'>        <span class="n">table</span>       <span class="o">=&gt;</span> <span class="nv">$TABLE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">where</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">5</span> <span class="p">],</span>
</span><span class='line'>        <span class="n">tests</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="nv">$COLUMN</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">],</span>
</span><span class='line'>        <span class="n">description</span> <span class="o">=&gt;</span> <span class="s">&quot;if input &#39;1&#39;&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">subtest</span> <span class="s">&quot;enum column에 숫자 이름의 컬럼이 들어간 경우(0,1,2)&quot;</span> <span class="o">=&gt;</span>  <span class="k">sub </span><span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="mi">1</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;0&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">},</span>
</span><span class='line'>        <span class="mi">2</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">},</span>
</span><span class='line'>        <span class="mi">3</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">n</span> <span class="o">=&gt;</span> <span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="mi">3</span> <span class="p">},</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">initialize</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | Field | Type              | Null | Key | Default | Extra          |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'><span class="c1">#    | id    | int(11) unsigned  | NO   | PRI | NULL    | auto_increment |</span>
</span><span class='line'><span class="c1">#    | c1    | enum(&#39;0&#39;,&#39;1&#39;,&#39;2&#39;) | YES  |     | NULL    |                |</span>
</span><span class='line'><span class="c1">#    +-------+-------------------+------+-----+---------+----------------+</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">insert_values</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_value</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span>
</span><span class='line'>    <span class="n">test_column_index</span><span class="p">(</span><span class="nv">%h</span><span class="p">);</span> <span class="c1">#Fail</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1(id,c1) VALUES(4,1)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">all_row_ok</span><span class="p">(</span>
</span><span class='line'>        <span class="n">table</span>       <span class="o">=&gt;</span> <span class="nv">$TABLE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">where</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">4</span> <span class="p">],</span>
</span><span class='line'>        <span class="n">tests</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="nv">$COLUMN</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">],</span>
</span><span class='line'>        <span class="n">description</span> <span class="o">=&gt;</span> <span class="s">&quot;if input just 1&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;INSERT INTO t1(id,c1) VALUES(5,&#39;1&#39;)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">all_row_ok</span><span class="p">(</span>
</span><span class='line'>        <span class="n">table</span>       <span class="o">=&gt;</span> <span class="nv">$TABLE</span><span class="p">,</span>
</span><span class='line'>        <span class="n">where</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="mi">5</span> <span class="p">],</span>
</span><span class='line'>        <span class="n">tests</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="nv">$COLUMN</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">],</span>
</span><span class='line'>        <span class="n">description</span> <span class="o">=&gt;</span> <span class="s">&quot;if input &#39;1&#39;&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">done_testing</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">query</span><span class="p">($)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$query</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$db</span><span class="o">-&gt;</span><span class="n">query</span><span class="p">(</span><span class="nv">$query</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="k">print</span> <span class="bp">STDERR</span> <span class="s">&quot;&gt;&gt; &quot;</span><span class="p">,</span> <span class="nv">$query</span><span class="p">,</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">initialize</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">my</span> <span class="nv">@cols</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nb">sprintf</span> <span class="sx">qq(&#39;$h{$_}-&gt;{n}&#39;)</span> <span class="p">}</span> <span class="nb">sort</span> <span class="nb">keys</span> <span class="nv">%h</span><span class="p">;</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$enum</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="sx">q{ENUM(%s)}</span><span class="p">,</span><span class="nb">join</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">,</span><span class="nv">@cols</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="bp">STDERR</span> <span class="s">&quot;Database : $DATABASE\n&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;DROP DATABASE IF EXISTS `$DATABASE`&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;CREATE DATABASE `$DATABASE` DEFAULT CHARACTER SET `utf8`&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;USE `$DATABASE`&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;CREATE TABLE `$TABLE` (id INT(11) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT) DEFAULT CHARACTER SET `utf8` ENGINE = `InnoDB`&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">query</span><span class="p">(</span><span class="s">&quot;ALTER TABLE `$TABLE` ADD `$COLUMN` $enum  NULL  DEFAULT NULL  AFTER `id`&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="bp">STDERR</span> <span class="s">&#39;-&#39;</span> <span class="n">x</span> <span class="mi">80</span><span class="p">,</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">insert_values</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$k</span> <span class="p">(</span> <span class="nb">sort</span> <span class="nb">keys</span> <span class="nv">%h</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$db</span><span class="o">-&gt;</span><span class="n">insert</span><span class="p">(</span> <span class="nv">$TABLE</span><span class="p">,</span> <span class="p">{</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="nv">$k</span><span class="p">,</span> <span class="nv">$COLUMN</span> <span class="o">=&gt;</span> <span class="nv">$h</span><span class="p">{</span><span class="nv">$k</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;n&#39;</span><span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">test_column_value</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$k</span> <span class="p">(</span> <span class="nb">sort</span> <span class="nb">keys</span> <span class="nv">%h</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">all_row_ok</span><span class="p">(</span>
</span><span class='line'>            <span class="n">table</span>       <span class="o">=&gt;</span> <span class="nv">$TABLE</span><span class="p">,</span>
</span><span class='line'>            <span class="n">where</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="n">id</span> <span class="o">=&gt;</span> <span class="nv">$k</span> <span class="p">],</span>
</span><span class='line'>            <span class="n">tests</span>       <span class="o">=&gt;</span> <span class="p">[</span> <span class="nv">$COLUMN</span> <span class="o">=&gt;</span> <span class="nv">$h</span><span class="p">{</span><span class="nv">$k</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">n</span><span class="p">}</span> <span class="p">],</span>
</span><span class='line'>            <span class="n">description</span> <span class="o">=&gt;</span> <span class="s">&quot;row $k // $COLUMN is $h{$k}-&gt;{&#39;n&#39;}&quot;</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">sub </span><span class="nf">test_column_index</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">%h</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$k</span> <span class="p">(</span> <span class="nb">sort</span> <span class="nb">keys</span> <span class="nv">%h</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">all_row_ok</span><span class="p">(</span>
</span><span class='line'>            <span class="n">sql</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="s">&quot;SELECT $COLUMN + 0 as i FROM $TABLE WHERE id = ?&quot;</span><span class="p">,</span> <span class="nv">$k</span> <span class="p">],</span>
</span><span class='line'>            <span class="n">tests</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="n">i</span> <span class="o">=&gt;</span> <span class="nv">$h</span><span class="p">{</span><span class="nv">$k</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;i&#39;</span><span class="p">}</span> <span class="p">],</span>
</span><span class='line'>            <span class="n">description</span> <span class="o">=&gt;</span> <span class="s">&quot;$k: index of $COLUMN is $h{$k}-&gt;{&#39;i&#39;}&quot;</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ENUM type side effects</h2>

<p>위 테스트를 통해 알수있는 ENUM 자료형 사용시 주의해야할 사항은 다음과 같습니다.</p>

<ol>
<li><code>ENUM</code>으로 정의된 컬럼에 내부 색인에 영향을 주도록 컬럼의 값 순서를 변경하면 DB에 저장된 &#8216;값&#8217;에는 영향이 없지만 색인에는 영향이 생깁니다.</li>
<li><code>ENUM</code>의 값으로 색인과 동일한 숫자를 사용 할 경우 인용부호의 사용에 주의하지 않으면 예상하는 결과와 다른 동작을 초래할 수 있습니다.</li>
</ol>


<p>이 밖에 <code>ENUM</code> 자료형을 사용했을 때 고려해야 할 사항은 다음 링크를 참고하시기 바랍니다. <a href="http://komlenic.com/244/8-reasons-why-mysqls-enum-data-type-is-evil/">8 Reasons Why MySQL&#8217;s ENUM Data Type Is Evil</a></p>

<h2>Conclusion</h2>

<ul>
<li>MySQL의 <code>ENUM</code> 자료형은 경우에 따라 유용하지만 발생할 수 있는 몇 가지 부작용에 주의해야한다.</li>
<li>상황을 재현하는 테스트코드는 문제를 이해하고 공유하는데 도움을 준다.</li>
<li>Test::Most, Test::DatabaseRow 모듈은 테스트 코드 작성에 유용하다.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silex Techtalk - 02/01 - 2012]]></title>
    <link href="http://silexkr.github.com/blog/2012/02/01/silex-techtalk-02-01-2012/"/>
    <updated>2012-02-01T17:41:00+09:00</updated>
    <id>http://silexkr.github.com/blog/2012/02/01/silex-techtalk-02-01-2012</id>
    <content type="html"><![CDATA[<p>  오늘 있었던 Silex Techtalk 을 Storify 로 정리해보았습니다.</p>

<script src="http://storify.com/jeen_lee/silex-techtalk-1.js"></script>


<p><noscript>[<a href="http://storify.com/jeen_lee/silex-techtalk-1" target="_blank">View the story &#8220;Silex Techtalk 02/01 - 2012&#8221; on Storify</a>]</noscript></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery note plugin]]></title>
    <link href="http://silexkr.github.com/blog/2012/01/20/jquery-note-plugin/"/>
    <updated>2012-01-20T19:23:00+09:00</updated>
    <id>http://silexkr.github.com/blog/2012/01/20/jquery-note-plugin</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-0TusrT1pxqA/Txk9pS0yFcI/AAAAAAAAABQ/AuhNXWl4ZrA/jquey.note.png" alt="jquery note preview" /></p>

<p><a href="http://aanoaa.github.com/jquery-note/">demo</a></p>

<h1>jquery.note</h1>

<h2>what the..</h2>

<p>메모장입니다.
상태를 저장할 수 있고요.
상태에 따른 hook 이 많아서 유연하게 사용할 수 있고요.
ajax 로 데이터를 주고 받아서 서버에 기록을 남길 수도 있습니다.
회사에서 필요해서 맨들었습니다.
여기저기 찾아봤는데 꼭 바라는게 없더라고요.</p>

<h2>사용법</h2>

<p>html 안에서 css, 랑 js 를 include 해주고요
<code>$(document).ready</code> 안에 슥슥해주면 됩니다.</p>

<figure class='code'><figcaption><span>[jquery.note] [] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/jquery.note.css&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;script/jquery-1.6.2.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;script/jquery.note.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a[title=note]&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">note</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://coffeescript.org/">coffeescript</a> 로 작성했고요, css 는
<a href="http://sass-lang.com/">scss</a> 로 작성했습니다.</p>

<h2>Hooks</h2>

<figure class='code'><figcaption><span>[jquery.note hook example] [] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;afterReveal.note&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/path/to&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">textStatus</span><span class="p">,</span> <span class="nx">jqXHR</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">data</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">notes</span> <span class="o">=</span> <span class="nx">res</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// res 는 아래처럼 구성됩니다.</span>
</span><span class='line'>        <span class="c1">// [{&quot;who&quot;:&quot;hshong&quot;,&quot;date&quot;:&quot;2012-01-20 19:23&quot;,&quot;status&quot;:&quot;open&quot;},{&quot;who&quot;:&quot;aanoaa&quot;,&quot;date&quot;:&quot;2012-01-20 19:25&quot;,&quot;note&quot;:&quot;다시하렴 처음부터&quot;}]</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">notes</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">owner</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>notes가 보여질때 갯수를 확인한다음에, 0개라면 서버로 질의해서 노트와,
상태정보를 받아와서 업데이트 해주고 reloading 합니다.</p>

<p>옵션에 따라 달리 동작할 수 있는데, 실제로 쓸거 아니면 알 필요
없습니다.</p>

<p>사용가능한 hook 은 아래와 같습니다.</p>

<ul>
<li><code>init.note</code> 초기화할때</li>
<li><code>afterClose.note</code> 닫히자마자</li>
<li><code>beforeSend.note</code> ajax 보내기전에</li>
<li><code>afterSuccess.note</code> ajax 성공하자마자</li>
<li><code>beforeReveal.note</code> 보여지기바로전에</li>
<li><code>afterReveal.note</code> 보여지자마자</li>
<li><code>changeStatus.note</code> open에서 close 되는것처럼 상태가 변경되고 나면</li>
</ul>


<h1>See also</h1>

<ul>
<li><a href="https://github.com/aanoaa/jquery-note">jquery-note on github</a></li>
</ul>


<h1>마무리</h1>

<p>jquery plugin 을 만들고자 하는 분이라면 한번 스윽 보셔도 괜찮을 것
같습니다.</p>

<p>javascript 잘하시는 어떤분이 제 코드를 보고 좀 까줬으면 하는 바람도
있습니다. 제가 영어가 딸려서 미국사람한테는 그런부탁 못하거든요.</p>

<p>정말 글 못쓰네요.. 어렵고요 아아아아.. 쓰다보면 나아지겟죠.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress usage]]></title>
    <link href="http://silexkr.github.com/blog/2012/01/20/octopress-usage/"/>
    <updated>2012-01-20T01:44:00+09:00</updated>
    <id>http://silexkr.github.com/blog/2012/01/20/octopress-usage</id>
    <content type="html"><![CDATA[<h1>octopress 에서 어떻게 글을 쓸 것인가?</h1>

<h2>ruby install</h2>

<pre><code>$ rvm install 1.9.2 &amp;&amp; rvm --default use 1.9.2
$ gem install bundler
</code></pre>

<p>rvm 은 ruby 의 <a href="http://perlbrew.pl/">perlbrew</a> 고요,
bundler는
<a href="http://search.cpan.org/~miyagawa/carton-v0.9.3/lib/Carton.pod">Carton</a>
입니다.</p>

<h2>git clone &amp;&amp; bundle install</h2>

<p>저장소의 remote 정보는 아래와 같습니다.</p>

<pre><code>$ git remote -v
octopress   git://github.com/imathis/octopress.git (fetch)
octopress   git://github.com/imathis/octopress.git (push)
origin  git@github.com:silexkr/silexkr.github.com.git (fetch)
origin  git@github.com:silexkr/silexkr.github.com.git (push)
</code></pre>

<p>살렉스 여러분은 write 권한이 있습니다. clone 받으세여.</p>

<pre><code>$ git clone git@github.com:silexkr/silexkr.github.com.git
</code></pre>

<p>그리고 의존모듈을 설치 합니다. &amp;&amp; 글을 쓰기 위해선 <code>source</code> 브랜치를 사용합니다.</p>

<pre><code>$ cd silexkr.github.com.git/
$ git checkout source
$ bundle install
</code></pre>

<h2>rake setup_github_pages</h2>

<p>write 할 수 있는 repository 주소를 octopress 에 등록해줘야 합니다.</p>

<pre><code>$ rake setup_github_pages
Enter the read/write url for your repository: git@github.com:silexkr/silexkr.github.com.git
</code></pre>

<h2>rake new_post</h2>

<p>새글을 쓰기 위해선 직접 파일을 맨들어줘도 되지만 rake 유틸리티를
이용하세요. 편합니다. 요렇게요.</p>

<pre><code>$ rake new_post["Octopress usage"]
mkdir -p source/_posts
Creating new post: source/_posts/2012-01-20-octopress-usage.markdown
</code></pre>

<p><code>Octopress usage</code> 가 제목이고요,
<code>source/_posts/2012-01-20-octopress-usage.markdown</code> 파일이
만들어졌습니다.</p>

<h2>메타정보입력</h2>

<p><code>source/_posts/2012-01-20-octopress-usage.markdown</code> 파일을 열어보면 젤
위에 요렇게 나옵니다.</p>

<pre><code>---
layout: post
title: "Octopress usage"
date: 2012-01-20 01:44
comments: true
categories:
---
</code></pre>

<p>저희는 여러명이서 쓸것이기 때문에 <code>author</code> 정보도 입력하면 좋습니다.
default 는 <strong>Silex</strong> 입니다.</p>

<p>카테고리는 여러개를 입력할 수
있습니다. <a href="http://octopress.org/docs/blogging/">Blogging Basics</a> 에
좋은 예가 있습니다.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># One category
</span><span class='line'>categories: Sass
</span><span class='line'>
</span><span class='line'># Multiple categories example 1
</span><span class='line'>categories: [CSS3, Sass, Media Queries]
</span><span class='line'>
</span><span class='line'># Multiple categories example 2
</span><span class='line'>categories:
</span><span class='line'>- CSS3
</span><span class='line'>- Sass
</span><span class='line'>- Media Queries</span></code></pre></td></tr></table></div></figure>


<p>저는 이글을 쓰면서 요렇게 했습니다.</p>

<pre><code>---
author: 홍형석
layout: post
title: "Octopress usage"
date: 2012-01-20 01:44
comments: true
categories: octopress
---
</code></pre>

<h2>글작성</h2>

<p>markdown 문법을 따릅니다.
<a href="http://octopress.org/docs/blogging/plugins/">Plugins</a>를 활용해서
이미지도 옇고 코드도 옇습니다.</p>

<h2>local 에서 확인</h2>

<pre><code>$ rake preview
Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
~~~ 중략 ~~~
&gt;&gt;&gt; Compass is polling for changes. Press Ctrl-C to Stop.
</code></pre>

<p>문서보면 <code>rake watch</code> 도 있는데여, <code>scss</code>, <code>css</code> 건드릴거 아니면
안띄워줘도 됩니다.</p>

<h2>rake deploy</h2>

<p>로컬에서 확인이 완료 되었으면, deploy 합니다.</p>

<pre><code>$ rake deploy
</code></pre>

<p>github 에서 성공메세지를 받으면 <a href="http://silexkr.github.com/">silexkr.github.com</a> 에서 바로
확인할 수 있습니다.(대부분 바로 반영되더라고요)</p>

<h2>git add, commit, push</h2>

<p>deploy 와는 별도로 원본글을 커밋하고 이력을 관리합니다.</p>

<pre><code>$ git add .
$ git commit -m "posting Octopress usage"
$ git push origin source
</code></pre>

<p><em>주의</em>할게 있는데요. <code>master</code> 브랜치가 아니라 <code>source</code> 로 push 해야
 합니다.</p>

<p><code>master</code>는 원본이 변환된 static 파일들이 모여 서비스 되는 브랜치고요,
<code>source</code>에서 원본을 관리합니다.</p>

<p>생각해보니까 <code>master</code>는 어차피 deploy 할때 HEAD 라서 그냥 push 해도
되겠군여.</p>

<h1>이제 뭘 하징?</h1>

<p>네 글을 써주세요.</p>

<h1>See also</h1>

<ul>
<li><a href="http://octopress.org/docs/blogging/">Blogging Basics</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://silexkr.github.com/blog/2012/01/19/hello-world/"/>
    <updated>2012-01-19T17:39:00+09:00</updated>
    <id>http://silexkr.github.com/blog/2012/01/19/hello-world</id>
    <content type="html"><![CDATA[<h1>소개</h1>

<p>건대입구에서 소프트웨어 장사하는 Silex(일명 용키)입니다.</p>

<h1>멤버</h1>

<ul>
<li><a href="https://twitter.com/y0ngbin/">유용빈</a>
용사장이라 불리우고요, 사장입니다. 맥북프로 씁니다.</li>
<li><a href="https://twitter.com/keedi/">김도형</a>
거침없이 배우는 펄 번역했고요, vaio 에 arch linux 씁니다.</li>
<li><a href="https://twitter.com/mintegrals/">이민선</a>
젊은 여자고요, 진님이 쓰다버린 흰둥이 맥북프로 씁니다.</li>
<li><a href="https://twitter.com/aanoaa/">홍형석</a>
emacs 쓰고요, 띵크패드에 우분투 씁니다.</li>
<li><a href="https://twitter.com/jeen_lee/">이종진</a>
일본 IT 업체에서 일하다 온 유부남이고요, 일제 맥북에어 씁니다.</li>
<li><a href="https://twitter.com/rumidier/">조한영</a>
도형님 문하생입니다.(직원은 아닌 것 같습니다.) 듣보 노트북에 우분투
씁니다.</li>
</ul>


<p>이중에 <a href="http://search.cpan.org/">CPAN</a> Author 가 4명 입니다.</p>

<ul>
<li><a href="http://search.cpan.org/~jeen/">jeen</a></li>
<li><a href="http://search.cpan.org/~keedi/">keedi</a></li>
<li><a href="http://search.cpan.org/~aanoaa/">aanoaa</a></li>
<li><a href="http://search.cpan.org/~yongbin/">yongbin</a></li>
</ul>


<h1>하는 일</h1>

<p>지금은 perl로 private한 웹서비스 맨들고 있습니다. 웹서비스말고 다른
것도 할 수 있습니다. 자세한건 용사장님이 언젠가 포스팅 하지 않을까
그래 생각하고 잇습니다.</p>

<h1>See also</h1>

<p><a href="http://www.facebook.com/silexkr">silexkr - facebook</a></p>

<p><img src="https://lh4.googleusercontent.com/-luyngRUk4Dg/TxfuqnNyyYI/AAAAAAAAABI/2VkyXnMdG74/s400/silex_except_aanoaa.jpg" alt="we are silex" /></p>
]]></content>
  </entry>
  
</feed>
